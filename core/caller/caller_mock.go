// Code generated by MockGen. DO NOT EDIT.
// Source: core/caller/caller.go
//
// Generated by this command:
//
//	mockgen -source=core/caller/caller.go -destination=core/caller/caller_mock.go -package=caller
//

// Package caller is a generated GoMock package.
package caller

import (
	reflect "reflect"

	rolev1connect "github.com/sandisuryadi36/sansan-dashboard/gen/role/v1/rolev1connect"
	userv1connect "github.com/sandisuryadi36/sansan-dashboard/gen/user/v1/userv1connect"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceCaller is a mock of ServiceCaller interface.
type MockServiceCaller struct {
	ctrl     *gomock.Controller
	recorder *MockServiceCallerMockRecorder
}

// MockServiceCallerMockRecorder is the mock recorder for MockServiceCaller.
type MockServiceCallerMockRecorder struct {
	mock *MockServiceCaller
}

// NewMockServiceCaller creates a new mock instance.
func NewMockServiceCaller(ctrl *gomock.Controller) *MockServiceCaller {
	mock := &MockServiceCaller{ctrl: ctrl}
	mock.recorder = &MockServiceCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceCaller) EXPECT() *MockServiceCallerMockRecorder {
	return m.recorder
}

// Role mocks base method.
func (m *MockServiceCaller) Role() rolev1connect.RoleServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(rolev1connect.RoleServiceClient)
	return ret0
}

// Role indicates an expected call of Role.
func (mr *MockServiceCallerMockRecorder) Role() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockServiceCaller)(nil).Role))
}

// User mocks base method.
func (m *MockServiceCaller) User() userv1connect.UserServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(userv1connect.UserServiceClient)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockServiceCallerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockServiceCaller)(nil).User))
}
